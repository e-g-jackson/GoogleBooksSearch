{"version":3,"sources":["assets/SearchBar.js","assets/Header.js","assets/Results.js","assets/SavedBooks.js","App.js","serviceWorker.js","index.js"],"names":["list","Header","react_default","a","createElement","className","Link","to","React","Component","Results","console","log","listItems","i","length","obj","id","title","volumeInfo","author","authors","image","imageLinks","thumbnail","description","push","_this","this","listedItems","manageData","props","data","map","x","key","alt","src","onClick","event","saver","ident","desc","SearchBar","state","txtInput","results","handleChange","newSearch","target","value","setState","search","$","val","trim","get","items","done","fail","alert","render","type","placeholder","onChange","assets_Results","saveBook","click","btn","bookData","attr","post","window","location","href","response","SavedBooks","num","saved","_this2","deleter","e","ajax","url","success","reload","App","BrowserRouter","assets_Header","Route","exact","path","component","Boolean","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c74ceea5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Results from \"./Results\"\r\nimport $ from \"jquery\";\r\n\r\nlet list;\r\n\r\nclass SearchBar extends React.Component {\r\n    \r\n    state = {\r\n        txtInput: \"\",\r\n        results: \"\"\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const newSearch = event.target.value;\r\n        this.setState({\r\n            txtInput:newSearch\r\n        });\r\n    };\r\n\r\n    search = () => {\r\n        const search = $(\"#bookSearch\").val().trim();\r\n        $.get(\"https://www.googleapis.com/books/v1/volumes?q=\" + search, function (data) {\r\n            list = data.items;\r\n        }, \"json\").done(() => {\r\n            this.setState({results: list})\r\n        }).fail(() => alert('Something went wrong, try again!'))\r\n    }\r\n    \r\n    saveBook(click) {\r\n        const btn = click.target;\r\n        const bookData = {\r\n            id: $(btn).attr(\"ident\"),\r\n            title: $(btn).attr(\"title\"),\r\n            author: $(btn).attr(\"author\"),\r\n            image: $(btn).attr(\"image\"),\r\n            description: $(btn).attr(\"desc\")\r\n        };\r\n        $.post(window.location.href + \"./api/books\", bookData, (response) => {\r\n            console.log(response);\r\n        })\r\n    }\r\n\r\n    render = () => {\r\n        // console.log(this.state.results)\r\n        return(\r\n            <div>\r\n                {/* SearchBar */}\r\n                <div className = \"container border-top border-bottom border-success\">\r\n                    <div className = \"row py-4\">\r\n                        <div className = \"col-1\">\r\n                            <h3>Search:</h3>\r\n                        </div>\r\n                        <div className = \"col-1\"></div>\r\n                        <div className = \"col-8\">\r\n                            <input \r\n                                id = \"bookSearch\" \r\n                                type = \"text\" \r\n                                placeholder = \"Search by Book Name or Author here!\" \r\n                                onChange = {event => this.handleChange(event)} \r\n                            />\r\n                        </div>\r\n                        <div className = \"col-1\"></div>\r\n                        <div className = \"col-1\">\r\n                            <button id = \"SearchBtn\"\r\n                                className = \"btn btn-md btn-success\"\r\n                                onClick = {() => {this.search()}}>Search!</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* Results */}\r\n                <Results \r\n                    data = {this.state.results}\r\n                    saver = {(event) => this.saveBook(event)}\r\n                    />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Header extends React.Component {\r\n    // search () {\r\n    //     return(\r\n    //         <button className = \"btn btn-lg btn-success mr-3 ml-auto\">\r\n    //             Search Books\r\n    //         </button>\r\n    //     )\r\n    // }\r\n\r\n    // saved () {\r\n    //     return(\r\n    //         <button className = \"btn btn-lg btn-success ml-3 mr-auto\">\r\n    //             Saved Books\r\n    //         </button>\r\n    //     )\r\n    // }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"jumbotron container mb-4 text-center text-success\">\r\n                <div className = \"row text-center\">\r\n                    <h1 className = \"col-12 mb-3\">\r\n                        <strong>Google Books Search!</strong>\r\n                    </h1>\r\n                    <div className = \"text-center container-fluid\">\r\n                        <Link to = \"/\">\r\n                            <button className = \"btn btn-success mr-3 ml-auto\">\r\n                                Search Books\r\n                            </button>\r\n                            {/* {this.search()} */}\r\n                        </Link>\r\n                        <Link to = \"/saved\">\r\n                            <button className = \"btn btn-success ml-3 mr-auto\">\r\n                                Saved Books\r\n                            </button>\r\n                            {/* {this.saved()} */}\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nclass Results extends React.Component {\r\n\r\n    manageData (list) {\r\n        console.log(list);\r\n        const listItems = []\r\n        for (var i = 0; i < list.length; i++){\r\n            const obj = {\r\n                id: list[i].id,\r\n                title: list[i].volumeInfo.title,\r\n                author: list[i].volumeInfo.authors[0],\r\n                image: list[i].volumeInfo.imageLinks.thumbnail,\r\n                description: list[i].volumeInfo.description,\r\n            }\r\n            listItems.push(obj)\r\n        };\r\n        console.log(listItems)\r\n        return listItems;\r\n    }\r\n\r\n    render() {\r\n        const list = this.manageData(this.props.data);\r\n        \r\n        const listedItems = list.map((x)=> \r\n            <li className = \"listedItem row\" key = {x.id}>\r\n                <div className = \"col-2\">\r\n                    <img alt = {x.title} src = {x.image} />\r\n                </div>\r\n                <div className = \"col-10\">\r\n                    <div className = \"d-inline\">\r\n                        <h3>{x.title}</h3>\r\n                        <button \r\n                            className = \"saveBtn btn btn-sm btn-success float-right\" \r\n                            onClick = {(event) => this.props.saver(event)}\r\n                            ident = {x.id}\r\n                            title = {x.title}\r\n                            author = {x.author}\r\n                            image = {x.image}\r\n                            desc = {x.description}>Save Book!</button>\r\n                    </div>\r\n                    <p><em>By: {x.author}</em></p>\r\n                    <p>{x.description}</p>\r\n                </div>\r\n            </li>\r\n        )\r\n\r\n        return(\r\n            <ul className = \"container\">\r\n                {listedItems}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nlet list = []\r\nclass SavedBooks extends React.Component {\r\n    state = {\r\n        num: 0,\r\n        saved: list\r\n    }\r\n    componentDidMount(){\r\n        $.get('/api/books', (data) => {\r\n            console.log(data)\r\n            list = data.map((x) =>{\r\n                return(\r\n                    <li className = \"listedItem row mb-4\" key = {x.id}>\r\n                    <div className = \"col-2\">\r\n                        <img alt = {x.title} src = {x.image} />\r\n                    </div>\r\n                    <div className = \"col-10\">\r\n                        <div className = \"d-inline\">\r\n                            <h3>{x.title}</h3>\r\n                            <button \r\n                                className = \"saveBtn btn btn-sm btn-success float-right\" \r\n                                onClick = {event => this.deleter(event)}\r\n                                ident = {x.id}\r\n                                title = {x.title}\r\n                                author = {x.author}\r\n                                image = {x.image}\r\n                                desc = {x.description}>Delete Book!</button>\r\n                        </div>\r\n                        <p><em>By: {x.author}</em></p>\r\n                        <p>{x.description}</p>\r\n                    </div>\r\n                </li>\r\n                )\r\n            })\r\n            this.setState({\r\n                num: list.length,\r\n                saved: list\r\n            });\r\n        })\r\n    }\r\n    deleter(e){\r\n        const btn = e.target;\r\n        const ident= $(btn).attr('ident');\r\n        const oldNum = this.state.num;\r\n        const stateSetter = () => {\r\n            // const newNum = oldNum - 1;\r\n            // this.setState({num: newNum})\r\n            window.location.reload();\r\n        };\r\n\r\n        $.ajax({\r\n            url:'/api/books/' + ident,\r\n            type: 'DELETE',\r\n            success: () => stateSetter(),\r\n            fail:function(response){console.log(response)}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = 'container'>\r\n                <h2>Saved Books:</h2>\r\n                <ul className = \"listedItems row\">\r\n                    {this.state.saved}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SavedBooks;","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Header from './assets/Header';\nimport SearchBar from \"./assets/SearchBar\";\nimport SavedBooks from \"./assets/SavedBooks\"\n// import Results from \"./assets/Results\"\nimport './App.css';\n\nclass App extends Component {\n  \n  state = {\n    data: null\n  };\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Header />\n          <Route exact = {true} path = \"/\" component={SearchBar}>\n            {/* <SearchBar /> */}\n          </Route>\n          <Route exact = {true} path = \"/saved\" component = {SavedBooks}>\n            {/* <SavedBooks /> */}\n          </Route>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}